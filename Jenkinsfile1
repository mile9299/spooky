pipeline {
    agent any

    environment {
        JUICE_SHOP_REPO = 'https://github.com/mile9299/spooky.git'
        DOCKER_PORT = 3000 // Default Docker port
        SPECTRAL_DSN = credentials('SPECTRAL_DSN')
    }
    tools {
        nodejs 'NodeJS 18.0.0'
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: JUICE_SHOP_REPO]]])
                }
            }
        }
        stage('Build Podman Image') {
            steps {
                script {
                    echo 'Building Podman image...'
                    def podmanImage = sh(script: 'podman build -t spooky -f Dockerfile .', returnStdout: true).trim()
                    echo 'Podman image built successfully!'
                }
            }
        }
        stage('Falcon Cloud Security') {
              steps {
                withCredentials([usernameColonPassword(credentialsId: 'CRWD', variable: '')]) {
                crowdStrikeSecurity imageName: 'spooky', imageTag: 'latest', enforce: true, timeout: 60
            }
          }
        }
        stage('Trivy Scan') {
          steps {
            sh 'trivy image spooky:latest'
          }
        }
        stage('Deploy') {
            steps {
                script {
                    echo 'Deploying application...'
                    sh 'podman stop spooky || true'
                    sh 'podman rm spooky || true'
                    def containerId = sh(script: "podman run -d -P --name spooky spooky", returnStdout: true).trim()
                    def podmanHostPort = sh(script: "podman port ${containerId} ${DOCKER_PORT} | cut -d ':' -f 2", returnStdout: true).trim()
                    echo "Spooky is running on http://localhost:${podmanHostPort}"
                }
            }
        }
    }

    post {
        success {
            echo 'Build, test, and deployment successful!'
        }
        failure {
            echo 'Build, test, or deployment failed!'
        }
    }
}
